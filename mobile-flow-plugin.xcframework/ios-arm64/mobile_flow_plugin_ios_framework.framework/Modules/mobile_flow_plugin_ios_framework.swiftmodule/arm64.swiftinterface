// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name mobile_flow_plugin_ios_framework
import Foundation
import RxSwift
import Swift
import UIKit
@_exported import mobile_flow_plugin_ios_framework
@_hasMissingDesignatedInitializers final public class MobileFlowPluginImpl : mobile_flow_plugin_ios_framework.MobileFlowPlugin {
  public static func getInstance() -> mobile_flow_plugin_ios_framework.MobileFlowPlugin
  public static func getPluginVersion() -> Swift.String
  final public func setDelegate(_ delegate: mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate)
  final public func startSkiing(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  final public func stopSkiing()
  final public func activateRegionScan()
  final public func deactivateRegionScan()
  final public func downloadTicket(_ url: Swift.String)
  @objc deinit
}
public enum TicketError : Swift.Error {
  case badURL
  case download
  case limitExceeded
  case fileRead
  case extraction
  case parse
  case unknownGW
  case missingBarcode
  case missingProductName
  case missingValidFromDate
  case missingValidToDate
  case invalidValidFromDate
  case invalidValidToDate
  case missingCompanyID
  case invalidCompanyID
  case missingPSNR
  case missingAreaName
  case invalidExpirationDate
  case missingValidAreaID
  case invalidValidAreaID
  public static func == (a: mobile_flow_plugin_ios_framework.TicketError, b: mobile_flow_plugin_ios_framework.TicketError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class TestingManager {
  public static func getInstance() -> mobile_flow_plugin_ios_framework.TestingManager
  @objc deinit
}
public class MobileFlowTicket {
  final public let barcode: Swift.String
  final public let validAreaId: Swift.String
  final public let validAreaName: Swift.String
  final public let validInCompanyIds: Swift.String
  final public let productName: Swift.String?
  final public let validFrom: Swift.String?
  final public let validTo: Swift.String?
  final public let psnr: Swift.String?
  final public let image: UIKit.UIImage?
  public var validAreaIdInt: Swift.UInt? {
    get
  }
  public var validInCompanyIdsList: [Swift.UInt]? {
    get
  }
  public var validFromDate: Foundation.Date? {
    get
  }
  public var validToDate: Foundation.Date? {
    get
  }
  public init(barcode: Swift.String, validAreaId: Swift.String, validAreaName: Swift.String, validInCompanyIds: Swift.String, productName: Swift.String?, validFrom: Swift.String?, validTo: Swift.String?, psnr: Swift.String?, image: UIKit.UIImage?)
  convenience public init(barcode: Swift.String, areaId: Swift.String, areaName: Swift.String, companyIds: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MobileFlowTicketBuilder {
  public func setProductName(_ val: Swift.String)
  public func setValidFrom(_ val: Swift.String)
  public func setValidTo(_ val: Swift.String)
  public func setPSNR(_ val: Swift.String)
  public func setImage(_ val: UIKit.UIImage)
  public func build(barcode: Swift.String, areaId: Swift.String, areaName: Swift.String, companyIds: Swift.String) -> mobile_flow_plugin_ios_framework.MobileFlowTicket
  @objc deinit
}
public enum MobileFlowError : Swift.Error {
  case LicenseNotActivatedError
  case LocationPermissionError
  case BluetoothPermissionError
  case BluetoothInactiveError
  case DeviceOfflineError
  case GatewayUnknownError
  case GatewayNotReachableError
  case GateNotReachableError
  case TicketDownloadError
  case TicketInvalidError
  case InternalError
  public static func == (a: mobile_flow_plugin_ios_framework.MobileFlowError, b: mobile_flow_plugin_ios_framework.MobileFlowError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MobileFlowPlugin {
  static func getInstance() -> mobile_flow_plugin_ios_framework.MobileFlowPlugin
  func setDelegate(_ delegate: mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate)
  func startSkiing(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  func stopSkiing()
  func activateRegionScan()
  func deactivateRegionScan()
  func downloadTicket(_ url: Swift.String)
}
public protocol MobileFlowPluginDelegate {
  func newTicket(_ ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  func receivedError(_ error: mobile_flow_plugin_ios_framework.MobileFlowError)
  func enteredRegion(_ companyId: Swift.String)
  func leftRegion(_ companyId: Swift.String)
  func accessedGate(_ gateId: Swift.String)
}
extension mobile_flow_plugin_ios_framework.TicketError : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.TicketError : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.Hashable {}
