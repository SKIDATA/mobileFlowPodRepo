// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name mobile_flow_plugin_ios_framework
import Foundation
import RxSwift
import Swift
import UIKit
@_exported import mobile_flow_plugin_ios_framework
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class MobileFlowPluginImpl : ObjectiveC.NSObject, mobile_flow_plugin_ios_framework.MobileFlowPlugin {
  @objc public static func getInstance() -> mobile_flow_plugin_ios_framework.MobileFlowPlugin
  @objc public static func getPluginVersion() -> Swift.String
  @objc final public func setDelegate(_ delegate: mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate)
  @objc final public func startSkiing(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @objc final public func stopSkiing()
  @objc final public func activateRegionScan()
  @objc final public func deactivateRegionScan()
  @objc final public func downloadTicket(_ url: Swift.String)
  @objc deinit
}
public enum TicketError : Swift.Error {
  case badURL
  case download
  case limitExceeded
  case fileRead
  case extraction
  case parse
  case unknownGW
  case missingBarcode
  case missingProductName
  case missingValidFromDate
  case missingValidToDate
  case invalidValidFromDate
  case invalidValidToDate
  case missingCompanyID
  case invalidCompanyID
  case missingPSNR
  case missingAreaName
  case invalidExpirationDate
  case missingValidAreaID
  case invalidValidAreaID
  public static func == (a: mobile_flow_plugin_ios_framework.TicketError, b: mobile_flow_plugin_ios_framework.TicketError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class TestingManager {
  public static func getInstance() -> mobile_flow_plugin_ios_framework.TestingManager
  @objc deinit
}
@objc public class MobileFlowTicket : ObjectiveC.NSObject {
  final public let barcode: Swift.String
  final public let validAreaId: Swift.String
  final public let validAreaName: Swift.String
  final public let validInCompanyIds: Swift.String
  final public let productName: Swift.String?
  final public let validFrom: Swift.String?
  final public let validTo: Swift.String?
  final public let psnr: Swift.String?
  final public let image: UIKit.UIImage?
  public var validAreaIdInt: Swift.UInt? {
    get
  }
  @objc public var validInCompanyIdsList: [Swift.UInt]? {
    @objc get
  }
  @objc public var validFromDate: Foundation.Date? {
    @objc get
  }
  @objc public var validToDate: Foundation.Date? {
    @objc get
  }
  @objc public init(barcode: Swift.String, validAreaId: Swift.String, validAreaName: Swift.String, validInCompanyIds: Swift.String, productName: Swift.String?, validFrom: Swift.String?, validTo: Swift.String?, psnr: Swift.String?, image: UIKit.UIImage?)
  @objc convenience public init(barcode: Swift.String, areaId: Swift.String, areaName: Swift.String, companyIds: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MobileFlowTicketBuilder : ObjectiveC.NSObject {
  @objc public func setProductName(_ val: Swift.String)
  @objc public func setValidFrom(_ val: Swift.String)
  @objc public func setValidTo(_ val: Swift.String)
  @objc public func setPSNR(_ val: Swift.String)
  @objc public func setImage(_ val: UIKit.UIImage)
  @objc public func build(barcode: Swift.String, areaId: Swift.String, areaName: Swift.String, companyIds: Swift.String) -> mobile_flow_plugin_ios_framework.MobileFlowTicket
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MobileFlowError : Swift.Int, Swift.Error {
  case LicenseNotActivatedError
  case LocationPermissionError
  case BluetoothPermissionError
  case BluetoothInactiveError
  case DeviceOfflineError
  case GatewayUnknownError
  case GatewayNotReachableError
  case GateNotReachableError
  case TicketDownloadError
  case TicketInvalidError
  case InternalError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MobileFlowPlugin {
  @objc static func getInstance() -> mobile_flow_plugin_ios_framework.MobileFlowPlugin
  @objc func setDelegate(_ delegate: mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate)
  @objc func startSkiing(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @objc func stopSkiing()
  @objc func activateRegionScan()
  @objc func deactivateRegionScan()
  @objc func downloadTicket(_ url: Swift.String)
}
@objc public protocol MobileFlowPluginDelegate {
  @objc func newTicket(_ ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @objc func receivedError(_ error: mobile_flow_plugin_ios_framework.MobileFlowError)
  @objc func enteredRegion(_ companyId: Swift.String)
  @objc func leftRegion(_ companyId: Swift.String)
  @objc func accessedGate(_ gateId: Swift.String)
}
extension mobile_flow_plugin_ios_framework.TicketError : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.TicketError : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.RawRepresentable {}
