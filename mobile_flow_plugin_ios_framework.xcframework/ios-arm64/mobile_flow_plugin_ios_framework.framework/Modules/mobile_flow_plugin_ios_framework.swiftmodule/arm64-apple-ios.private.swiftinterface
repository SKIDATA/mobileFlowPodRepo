// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name mobile_flow_plugin_ios_framework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AudioToolbox
import Combine
import CoreBluetooth
import CoreLocation
import CoreML
import Foundation
import Network
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import mobile_flow_plugin_ios_framework
import os
@objc public protocol MobileFlowPlugin {
  @objc static func getInstance(token: Swift.String) throws -> any mobile_flow_plugin_ios_framework.MobileFlowPlugin
  @objc static func getPluginVersion() -> Swift.String
  @objc func setDelegate(_ delegate: any mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate)
  @objc func startMobileFlow(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket, shouldVibrate: Swift.Bool) -> Foundation.UUID?
  @objc func startMobileFlow(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket) -> Foundation.UUID?
  @objc func stopMobileFlow()
  @objc func downloadTicket(_ url: Swift.String)
  @objc func getPluginUUID() -> Swift.String
  @objc func getMobileFlowState() -> mobile_flow_plugin_ios_framework.MobileFlowState
  @objc func getActivatedTicket() -> mobile_flow_plugin_ios_framework.MobileFlowTicket?
  @objc func isPhoneSupported() -> Swift.Bool
  @objc func getMock() throws -> any mobile_flow_plugin_ios_framework.MobileFlowMock
}
@objc public protocol MobileFlowPluginDelegate {
  @objc func newTicket(_ ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @objc func receivedError(_ error: mobile_flow_plugin_ios_framework.MobileFlowError)
  @objc func receivedEvent(_ event: mobile_flow_plugin_ios_framework.MobileFlowEvent)
  @objc func mobileFlowStateChanged(to state: mobile_flow_plugin_ios_framework.MobileFlowState)
}
@objc(MockErrorWrapper) public class MockErrorWrapper : ObjectiveC.NSObject {
  public init(_ error: mobile_flow_plugin_ios_framework.MobileFlowError)
  @objc deinit
}
@objc(MockStateWrapper) public class MockStateWrapper : ObjectiveC.NSObject {
  public init(_ state: mobile_flow_plugin_ios_framework.MobileFlowState)
  @objc deinit
}
@objc(MockEventWrapper) public class MockEventWrapper : ObjectiveC.NSObject {
  public init(_ event: mobile_flow_plugin_ios_framework.MobileFlowEvent)
  @objc deinit
}
@objc public protocol MobileFlowMock {
  @objc var delegate: any mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate { get }
  @objc func cleanPassage(delayConfig: mobile_flow_plugin_ios_framework.DelayConfig)
  @objc func startup(delayConfig: mobile_flow_plugin_ios_framework.DelayConfig)
  @objc func offlineStartup(delayConfig: mobile_flow_plugin_ios_framework.DelayConfig)
  @objc func fullLifecycleWithPassage(delayConfig: mobile_flow_plugin_ios_framework.DelayConfig) throws
  @objc func ticketInvalid(delayConfig: mobile_flow_plugin_ios_framework.DelayConfig)
  @objc func customEvents(events: [Foundation.NSNumber], delayConfig: mobile_flow_plugin_ios_framework.DelayConfig) throws
  @objc func customErrors(errors: [Foundation.NSNumber], delayConfig: mobile_flow_plugin_ios_framework.DelayConfig) throws
  @objc func customStates(states: [Foundation.NSNumber], delayConfig: mobile_flow_plugin_ios_framework.DelayConfig) throws
  @objc func custom(errorEventStateWrapperItems: [ObjectiveC.NSObject], delayConfig: mobile_flow_plugin_ios_framework.DelayConfig) throws
}
extension mobile_flow_plugin_ios_framework.MobileFlowMock {
  public func cleanPassage()
  public func startup()
  public func offlineStartup()
  public func ticketInvalid()
  public func customEvents(events: [Foundation.NSNumber]) throws
  public func customErrors(errors: [Foundation.NSNumber]) throws
  public func customStates(states: [Foundation.NSNumber]) throws
  public func fullLifecycleWithPassage() throws
  public func custom(errorEventStateWrapperItems: [ObjectiveC.NSObject]) throws
}
@_hasMissingDesignatedInitializers @objc final public class MobileFlowPluginImpl : ObjectiveC.NSObject, mobile_flow_plugin_ios_framework.MobileFlowPlugin {
  @objc final public func getPluginUUID() -> Swift.String
  @objc public static func getInstance(token: Swift.String) throws -> any mobile_flow_plugin_ios_framework.MobileFlowPlugin
  @objc public static func getPluginVersion() -> Swift.String
  @objc final public func setDelegate(_ delegate: any mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate)
  @objc final public func startMobileFlow(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket) -> Foundation.UUID?
  @objc final public func startMobileFlow(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket, shouldVibrate: Swift.Bool = false) -> Foundation.UUID?
  @objc final public func downloadTicket(_ url: Swift.String)
  @objc final public func getLocalizationState() -> mobile_flow_plugin_ios_framework.MobileFlowState
  @objc final public func getMobileFlowState() -> mobile_flow_plugin_ios_framework.MobileFlowState
  @objc deinit
  @objc final public func getActivatedTicket() -> mobile_flow_plugin_ios_framework.MobileFlowTicket?
  @objc final public func stopMobileFlow()
  @objc final public func isPhoneSupported() -> Swift.Bool
  @objc final public func getMock() throws -> any mobile_flow_plugin_ios_framework.MobileFlowMock
}
extension mobile_flow_plugin_ios_framework.MobileFlowPluginImpl {
  final public func activateTestMode()
}
public enum Permissions : Swift.CaseIterable {
  case Location
  case PreciseLocation
  case Bluetooth
  case Camera
  public static func == (a: mobile_flow_plugin_ios_framework.Permissions, b: mobile_flow_plugin_ios_framework.Permissions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [mobile_flow_plugin_ios_framework.Permissions]
  public static var allCases: [mobile_flow_plugin_ios_framework.Permissions] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum MobileFlowError : Swift.Int, Swift.Error {
  case BluetoothNotActive
  case BluetoothPermissionMissing
  case DeviceOffline
  case GeneralError
  case InsufficientBattery
  case InvalidMobileFlowToken
  case InvalidTicketURL
  case LocationPermissionMissing
  case LocationPrecisePermissionMissing
  case PassageTimedOut
  case PluginOutdated
  case PluginOutdatedSoon
  case RFIDDetected
  case TicketCheckError_AreaFull
  case TicketCheckError_Blocked
  case TicketCheckError_DoubleUsage
  case TicketCheckError_Expired
  case TicketCheckError_TicketUnknown
  case TicketCheckError_TicketInvalidHereNow
  case TicketCheckError_TooLessRemainingValue
  case TicketCheckError_WrongLocation
  case TicketCheckError_WrongTime
  case TicketDownloadLimitExceeded
  case TicketInvalidError
  case TicketNotValidForCompany
  case TicketParsingError
  case TicketTransmissionError
  case UnsupportedDevice
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension mobile_flow_plugin_ios_framework.MobileFlowError {
  public func name() -> Swift.String
  public var nsNumber: Foundation.NSNumber {
    get
  }
}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public enum MobileFlowState : Swift.Int {
  case off
  case preparing
  case running
  case runningWithIssues
  public var value: Swift.String {
    get
  }
  public func name() -> Swift.String
  public var nsNumber: Foundation.NSNumber {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class DelayConfig : ObjectiveC.NSObject {
  public var delayBeforeGateAccessTriggered: Swift.Int
  public var delayBeforeTicketValid: Swift.Int
  public var delayBeforeGateAccessCompleted: Swift.Int
  public var delayBeforeGateGateInUse: Swift.Int
  public var delayBeforeOff: Swift.Int
  public var delayBeforeRunning: Swift.Int
  public var delayBeforePreparing: Swift.Int
  public var delayBeforeRunningWithIssues: Swift.Int
  public var delayBeforeLocationPermissionMissing: Swift.Int
  public var delayBeforeLocationServicesDisabled: Swift.Int
  public var delayBeforeBluetoothNotActive: Swift.Int
  public var delayBeforeBluetoothPermissionMissing: Swift.Int
  public var delayBeforeBatteryOptimizationActive: Swift.Int
  public var delayBeforeDeviceOffline: Swift.Int
  public var delayBeforeTicketNotValidForCompany: Swift.Int
  public var delayBeforeTicketDownloadLimitExceeded: Swift.Int
  public var delayBeforeUnsupportedDevice: Swift.Int
  public var delayBeforeGeneralError: Swift.Int
  public var delayBeforeTicketInvalid: Swift.Int
  public var delayBeforeInvalidTicketUrl: Swift.Int
  public var delayBeforeInvalidMobileFlowToken: Swift.Int
  public var delayBeforePluginOutdated: Swift.Int
  public var delayBeforePluginOutdatedSoon: Swift.Int
  public var delayBeforeTicketTransmissionError: Swift.Int
  public var delayBeforePassageTimeout: Swift.Int
  public var delayBeforeTicketParsingError: Swift.Int
  public var delayBeforeUnknownDevice: Swift.Int
  public var delayBeforeInsufficientBattery: Swift.Int
  public var delayBeforeRfidDetected: Swift.Int
  public var delayBeforeBleNotAvailable: Swift.Int
  public var delayBeforeTicketCheckError_AreaFull: Swift.Int
  public var delayBeforeTicketCheckError_Blocked: Swift.Int
  public var delayBeforeTicketCheckError_DoubleUsage: Swift.Int
  public var delayBeforeTicketCheckError_Expired: Swift.Int
  public var delayBeforeTicketCheckError_TicketUnknown: Swift.Int
  public var delayBeforeTicketCheckError_TicketInvalidHereNow: Swift.Int
  public var delayBeforeTicketCheckError_TooLessRemainingValue: Swift.Int
  public var delayBeforeTicketCheckError_WrongLocation: Swift.Int
  public var delayBeforeTicketCheckError_WrongTime: Swift.Int
  public func getDelayForEvent(_ mobileFlowEvent: mobile_flow_plugin_ios_framework.MobileFlowEvent) -> Swift.Int
  public func getDelayForState(_ mobileFlowState: mobile_flow_plugin_ios_framework.MobileFlowState) -> Swift.Int
  public func getDelayForError(_ mobileFlowError: mobile_flow_plugin_ios_framework.MobileFlowError) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public class MobileFlowMockImpl : mobile_flow_plugin_ios_framework.MobileFlowMock {
  @objc final public let delegate: any mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate
  public init(delegate: any mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate)
  @objc public func startup(delayConfig: mobile_flow_plugin_ios_framework.DelayConfig)
  @objc public func cleanPassage(delayConfig: mobile_flow_plugin_ios_framework.DelayConfig)
  @objc public func offlineStartup(delayConfig: mobile_flow_plugin_ios_framework.DelayConfig)
  @objc public func ticketInvalid(delayConfig: mobile_flow_plugin_ios_framework.DelayConfig)
  @objc public func fullLifecycleWithPassage(delayConfig: mobile_flow_plugin_ios_framework.DelayConfig) throws
  @objc public func customEvents(events: [Foundation.NSNumber], delayConfig: mobile_flow_plugin_ios_framework.DelayConfig) throws
  @objc public func customErrors(errors: [Foundation.NSNumber], delayConfig: mobile_flow_plugin_ios_framework.DelayConfig) throws
  @objc public func customStates(states: [Foundation.NSNumber], delayConfig: mobile_flow_plugin_ios_framework.DelayConfig) throws
  @objc public func custom(errorEventStateWrapperItems: [ObjectiveC.NSObject], delayConfig: mobile_flow_plugin_ios_framework.DelayConfig) throws
  @objc deinit
}
extension CoreLocation.CLLocationManager {
  public static func publishLocationPermission() -> CoreLocation.CLLocationManager.LocationPermissionPublisher
  public struct LocationPermissionPublisher : Combine.Publisher {
    public typealias Output = CoreLocation.CLAuthorizationStatus
    public typealias Failure = Swift.Never
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == CoreLocation.CLAuthorizationStatus
  }
}
extension CoreLocation.CLLocationManager {
  public static func publishLocationAccuracy() -> CoreLocation.CLLocationManager.LocationAccuracyPublisher
  public struct LocationAccuracyPublisher : Combine.Publisher {
    public typealias Output = CoreLocation.CLAccuracyAuthorization
    public typealias Failure = Swift.Never
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == CoreLocation.CLAccuracyAuthorization
  }
}
@objc public enum MobileFlowEvent : Swift.Int {
  case gateAccessTriggered
  case gateInUse
  case gateAccessCompleted
  case ticketValid
  public func name() -> Swift.String
  public var nsNumber: Foundation.NSNumber {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Logger {
  @objc deinit
}
@objc public class MobileFlowTicket : ObjectiveC.NSObject {
  @objc final public let barcode: Swift.String
  @objc final public let validAreaId: Swift.String?
  @objc final public let validAreaName: Swift.String?
  @objc final public let validInCompanyIds: Swift.String
  @objc final public let productName: Swift.String?
  @objc final public let validFrom: Foundation.Date?
  @objc final public let validTo: Foundation.Date?
  @objc final public let psnr: Swift.String?
  @objc final public let image: UIKit.UIImage?
  @objc final public let consumerCategoryName: Swift.String?
  final public let downloadTimestamp: Swift.UInt
  public var validAreaIdInt: Swift.UInt? {
    get
  }
  @objc public var validInCompanyIdsList: [Swift.Int] {
    @objc get
  }
  @objc public var downloadTimeStampDate: Foundation.Date {
    @objc get
  }
  @objc public init(barcode: Swift.String, validAreaId: Swift.String?, validAreaName: Swift.String?, validInCompanyIds: Swift.String, productName: Swift.String?, validFrom: Foundation.Date?, validTo: Foundation.Date?, psnr: Swift.String?, image: UIKit.UIImage?, consumerCategoryName: Swift.String?)
  @objc convenience public init(barcode: Swift.String, validAreaId: Swift.String? = nil, validAreaName: Swift.String? = nil, validInCompanyIds: Swift.String, productName: Swift.String? = nil, validFrom: Foundation.Date? = nil, validTo: Foundation.Date? = nil, psnr: Swift.String? = nil, consumerCategoryName: Swift.String? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension mobile_flow_plugin_ios_framework.Permissions : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.Permissions : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.RawRepresentable {}
extension mobile_flow_plugin_ios_framework.MobileFlowState : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.MobileFlowState : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowState : Swift.RawRepresentable {}
extension mobile_flow_plugin_ios_framework.MobileFlowEvent : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.MobileFlowEvent : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowEvent : Swift.RawRepresentable {}
