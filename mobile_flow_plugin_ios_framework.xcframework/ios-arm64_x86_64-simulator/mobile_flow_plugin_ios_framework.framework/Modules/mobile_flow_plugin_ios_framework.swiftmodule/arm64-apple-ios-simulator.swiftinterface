// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name mobile_flow_plugin_ios_framework
import AudioToolbox
import CoreBluetooth
import Foundation
import Network
import Swift
import UIKit
import _Concurrency
@_exported import mobile_flow_plugin_ios_framework
public struct GATTResponse {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class MobileFlowPluginImpl : ObjectiveC.NSObject, mobile_flow_plugin_ios_framework.MobileFlowPlugin {
  @objc final public func getPluginUUID() -> Swift.String
  @objc public static func getInstance() -> mobile_flow_plugin_ios_framework.MobileFlowPlugin
  @objc public static func getPluginVersion() -> Swift.String
  @objc final public func setDelegate(_ delegate: mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate)
  @objc final public func startSkiing(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @objc final public func activateRegionScan()
  @objc final public func deactivateRegionScan()
  @objc final public func downloadTicket(_ url: Swift.String)
  @objc final public func getLocalizationState() -> mobile_flow_plugin_ios_framework.MobileFlowLocalizationState
  @objc final public func stopSkiing()
  @objc deinit
}
public enum GATTResponseCode : Swift.UInt8 {
  case gateReady
  case ticketValid
  case passageCompleted
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum MobileFlowLocalizationState : Swift.Int {
  case off
  case preparing
  case running
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GATTResponseType : Swift.UInt8 {
  case response
  case error
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum GATTErrorResponseCode : Swift.UInt8 {
  case gateInUse
  case ticketInvalid
  case gateNotReachable
  case passageTimeout
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_hasMissingDesignatedInitializers final public class TestingManager {
  public static func getInstance() -> mobile_flow_plugin_ios_framework.TestingManager
  @objc deinit
}
@objc public class MobileFlowTicket : ObjectiveC.NSObject {
  @objc final public let barcode: Swift.String
  @objc final public let validAreaId: Swift.String
  @objc final public let validAreaName: Swift.String
  @objc final public let validInCompanyIds: Swift.String
  @objc final public let productName: Swift.String
  @objc final public let validFrom: Swift.String
  @objc final public let validTo: Swift.String
  @objc final public let psnr: Swift.String
  @objc final public let image: UIKit.UIImage?
  final public let downloadTimestamp: Swift.UInt
  public var validAreaIdInt: Swift.UInt? {
    get
  }
  @objc public var validInCompanyIdsList: [Swift.UInt]? {
    @objc get
  }
  @objc public var validFromDate: Foundation.Date? {
    @objc get
  }
  @objc public var validToDate: Foundation.Date? {
    @objc get
  }
  @objc public init(barcode: Swift.String, validAreaId: Swift.String, validAreaName: Swift.String, validInCompanyIds: Swift.String, productName: Swift.String, validFrom: Swift.String, validTo: Swift.String, psnr: Swift.String, image: UIKit.UIImage?)
  @objc convenience public init(barcode: Swift.String, validAreaId: Swift.String, validAreaName: Swift.String, validInCompanyIds: Swift.String, productName: Swift.String, validFrom: Swift.String, validTo: Swift.String, psnr: Swift.String)
  public func description() -> Swift.String
  @objc deinit
}
public struct GATTTicket {
}
public enum TicketError : Swift.Error {
  case badURL
  case download
  case limitExceeded
  case fileRead
  case extraction
  case parse
  case unknownGW
  case missingBarcode
  case missingProductName
  case missingValidFromDate
  case missingValidToDate
  case invalidValidFromDate
  case invalidValidToDate
  case missingCompanyID
  case invalidCompanyID
  case missingPSNR
  case missingAreaName
  case invalidExpirationDate
  case missingValidAreaID
  case invalidValidAreaID
  public static func == (a: mobile_flow_plugin_ios_framework.TicketError, b: mobile_flow_plugin_ios_framework.TicketError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum MobileFlowError : Swift.Int, Swift.Error {
  case LicenseNotActivatedError
  case LocationPermissionError
  case BluetoothPermissionError
  case BluetoothInactiveError
  case DeviceOfflineError
  case GatewayUnknownError
  case GatewayNotReachableError
  case GateNotReachableError
  case TicketDownloadError
  case TicketInvalidError
  case ConfigurationError
  case InternalError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum GATTError : Swift.Error {
  case ByteSizeOutOfRangeError
  case CouldNotConnectToSurroundingPeripherals
  case ConnectionError
  case InvalideArgumentError
  case InvalidResponseError
  case InvalidTicket
  case InvalidTicketArgumentError
  case ReadingDataError
  case ReceivedEmptyDataError
  case ReceivedUnknownResponse
  case MissingBleService
  case MissingBlePeripheral
  case MissingCentralManager
  case MissingCharacteristic
  case NotificationCharacteristicNotAvailableError
  case NoResponseTimeout
  case PassageTimedOut
  case Unknown
  case WriteCharacteristicNotAvailableError
  public static func == (a: mobile_flow_plugin_ios_framework.GATTError, b: mobile_flow_plugin_ios_framework.GATTError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AlgorithmParameterResponse : Swift.Codable {
  final public var thresholdID: Swift.Int?
  final public var threshold: Swift.Int?
  final public var offset: Swift.Int?
  final public var v2Offset: Swift.Int?
  final public var iphoneModel: Swift.String?
  final public var testEnv: Swift.Bool?
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum UInt128Errors : Swift.Error {
  case invalidString
  public static func == (a: mobile_flow_plugin_ios_framework.UInt128Errors, b: mobile_flow_plugin_ios_framework.UInt128Errors) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct UInt128 {
  public var significantBits: mobile_flow_plugin_ios_framework.UInt128 {
    get
  }
  public init(upperBits: Swift.UInt64, lowerBits: Swift.UInt64)
  public init()
  public init(_ source: mobile_flow_plugin_ios_framework.UInt128)
  public init(_ source: Swift.String) throws
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.FixedWidthInteger {
  public var nonzeroBitCount: Swift.Int {
    get
  }
  public var leadingZeroBitCount: Swift.Int {
    get
  }
  public var bigEndian: mobile_flow_plugin_ios_framework.UInt128 {
    get
  }
  public var littleEndian: mobile_flow_plugin_ios_framework.UInt128 {
    get
  }
  public var byteSwapped: mobile_flow_plugin_ios_framework.UInt128 {
    get
  }
  public init(_truncatingBits bits: Swift.UInt)
  public init(bigEndian value: mobile_flow_plugin_ios_framework.UInt128)
  public init(littleEndian value: mobile_flow_plugin_ios_framework.UInt128)
  public func addingReportingOverflow(_ rhs: mobile_flow_plugin_ios_framework.UInt128) -> (partialValue: mobile_flow_plugin_ios_framework.UInt128, overflow: Swift.Bool)
  public func subtractingReportingOverflow(_ rhs: mobile_flow_plugin_ios_framework.UInt128) -> (partialValue: mobile_flow_plugin_ios_framework.UInt128, overflow: Swift.Bool)
  public func multipliedReportingOverflow(by rhs: mobile_flow_plugin_ios_framework.UInt128) -> (partialValue: mobile_flow_plugin_ios_framework.UInt128, overflow: Swift.Bool)
  public func multipliedFullWidth(by other: mobile_flow_plugin_ios_framework.UInt128) -> (high: mobile_flow_plugin_ios_framework.UInt128, low: mobile_flow_plugin_ios_framework.UInt128.Magnitude)
  public func dividedReportingOverflow(by rhs: mobile_flow_plugin_ios_framework.UInt128) -> (partialValue: mobile_flow_plugin_ios_framework.UInt128, overflow: Swift.Bool)
  public func dividingFullWidth(_ dividend: (high: mobile_flow_plugin_ios_framework.UInt128, low: mobile_flow_plugin_ios_framework.UInt128)) -> (quotient: mobile_flow_plugin_ios_framework.UInt128, remainder: mobile_flow_plugin_ios_framework.UInt128)
  public func remainderReportingOverflow(dividingBy rhs: mobile_flow_plugin_ios_framework.UInt128) -> (partialValue: mobile_flow_plugin_ios_framework.UInt128, overflow: Swift.Bool)
  public func quotientAndRemainder(dividingBy rhs: mobile_flow_plugin_ios_framework.UInt128) -> (quotient: mobile_flow_plugin_ios_framework.UInt128, remainder: mobile_flow_plugin_ios_framework.UInt128)
}
extension mobile_flow_plugin_ios_framework.UInt128 {
  public static var bitWidth: Swift.Int {
    get
  }
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.BinaryInteger {
  public var words: [Swift.UInt] {
    get
  }
  public var trailingZeroBitCount: Swift.Int {
    get
  }
  public init?<T>(exactly source: T) where T : Swift.BinaryFloatingPoint
  public init<T>(_ source: T) where T : Swift.BinaryFloatingPoint
  public static func / (lhs: mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128) -> mobile_flow_plugin_ios_framework.UInt128
  public static func /= (lhs: inout mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128)
  public static func % (lhs: mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128) -> mobile_flow_plugin_ios_framework.UInt128
  public static func %= (lhs: inout mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128)
  public static func &= (lhs: inout mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128)
  public static func |= (lhs: inout mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128)
  public static func ^= (lhs: inout mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128)
  public static func &>>= (lhs: inout mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128)
  public static func &<<= (lhs: inout mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128)
  public typealias Stride = Swift.Int
  public typealias Words = [Swift.UInt]
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.UnsignedInteger {
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.Numeric {
  public static func + (lhs: mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128) -> mobile_flow_plugin_ios_framework.UInt128
  public static func += (lhs: inout mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128)
  public static func - (lhs: mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128) -> mobile_flow_plugin_ios_framework.UInt128
  public static func -= (lhs: inout mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128)
  public static func * (lhs: mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128) -> mobile_flow_plugin_ios_framework.UInt128
  public static func *= (lhs: inout mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128)
  public typealias Magnitude = mobile_flow_plugin_ios_framework.UInt128
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.Equatable {
  public static func == (lhs: mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128) -> Swift.Bool
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.Comparable {
  public static func < (lhs: mobile_flow_plugin_ios_framework.UInt128, rhs: mobile_flow_plugin_ios_framework.UInt128) -> Swift.Bool
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension mobile_flow_plugin_ios_framework.UInt128 : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension mobile_flow_plugin_ios_framework.UInt128 {
  @available(swift, deprecated: 3.2, renamed: "init(_:)")
  public static func fromUnparsedString(_ source: Swift.String) throws -> mobile_flow_plugin_ios_framework.UInt128
}
extension Swift.BinaryFloatingPoint {
  public init(_ value: mobile_flow_plugin_ios_framework.UInt128)
  public init?(exactly value: mobile_flow_plugin_ios_framework.UInt128)
}
extension Swift.String {
  public init(_ value: mobile_flow_plugin_ios_framework.UInt128, radix: Swift.Int = 10, uppercase: Swift.Bool = false)
}
public enum LocalizationSessionSetupStep : Swift.Int, Swift.CaseIterable {
  case retrievedParameter
  case retrievedGateway
  case checkedGatewayVersion
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [mobile_flow_plugin_ios_framework.LocalizationSessionSetupStep]
  public typealias RawValue = Swift.Int
  public static var allCases: [mobile_flow_plugin_ios_framework.LocalizationSessionSetupStep] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum Environment {
}
public enum OpenResponse {
  case Error(mobile_flow_plugin_ios_framework.MobileFlowError)
  case Failed
  case NoGateway(Swift.String)
  case NoGatewayVersion(Swift.String)
  case OnGoing
  case Success
}
@objc public protocol MobileFlowPlugin {
  @objc static func getInstance() -> mobile_flow_plugin_ios_framework.MobileFlowPlugin
  @objc func setDelegate(_ delegate: mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate)
  @objc func startSkiing(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @objc func stopSkiing()
  @objc func activateRegionScan()
  @objc func deactivateRegionScan()
  @objc func downloadTicket(_ url: Swift.String)
  @objc func getPluginUUID() -> Swift.String
  @objc func getLocalizationState() -> mobile_flow_plugin_ios_framework.MobileFlowLocalizationState
}
@objc public protocol MobileFlowPluginDelegate {
  @objc func newTicket(_ ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @objc func receivedError(_ error: mobile_flow_plugin_ios_framework.MobileFlowError)
  @objc func enteredRegion(_ companyId: Swift.String)
  @objc func leftRegion(_ companyId: Swift.String)
  @objc func localizationStateChanged(to state: mobile_flow_plugin_ios_framework.MobileFlowLocalizationState)
  @objc func awakeScreen()
}
public enum GATTCommandByte : Swift.UInt8 {
  case ticket
  case alive
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension mobile_flow_plugin_ios_framework.GATTResponseCode : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.GATTResponseCode : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.GATTResponseCode : Swift.RawRepresentable {}
extension mobile_flow_plugin_ios_framework.MobileFlowLocalizationState : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.MobileFlowLocalizationState : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowLocalizationState : Swift.RawRepresentable {}
extension mobile_flow_plugin_ios_framework.GATTResponseType : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.GATTResponseType : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.GATTResponseType : Swift.RawRepresentable {}
extension mobile_flow_plugin_ios_framework.GATTErrorResponseCode : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.GATTErrorResponseCode : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.GATTErrorResponseCode : Swift.RawRepresentable {}
extension mobile_flow_plugin_ios_framework.TicketError : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.TicketError : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.RawRepresentable {}
extension mobile_flow_plugin_ios_framework.GATTError : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.GATTError : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.UInt128Errors : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.UInt128Errors : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.LocalizationSessionSetupStep : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.LocalizationSessionSetupStep : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.LocalizationSessionSetupStep : Swift.RawRepresentable {}
extension mobile_flow_plugin_ios_framework.GATTCommandByte : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.GATTCommandByte : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.GATTCommandByte : Swift.RawRepresentable {}
