// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name mobile_flow_plugin_ios_framework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AudioToolbox
import Combine
import CoreBluetooth
import Foundation
import Network
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_exported import mobile_flow_plugin_ios_framework
@_hasMissingDesignatedInitializers @objc final public class MobileFlowPluginImpl : ObjectiveC.NSObject, mobile_flow_plugin_ios_framework.MobileFlowPlugin {
  @objc final public func getPluginUUID() -> Swift.String
  @objc public static func getInstance(token: Swift.String) throws -> mobile_flow_plugin_ios_framework.MobileFlowPlugin
  @objc public static func getPluginVersion() -> Swift.String
  @objc final public func setDelegate(_ delegate: mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate)
  @objc final public func startSkiing(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @objc final public func startMobileFlow(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @objc final public func downloadTicket(_ url: Swift.String)
  @objc final public func getLocalizationState() -> mobile_flow_plugin_ios_framework.MobileFlowState
  @objc final public func getMobileFlowState() -> mobile_flow_plugin_ios_framework.MobileFlowState
  @objc deinit
  @objc final public func stopSkiing()
  @objc final public func stopMobileFlow()
  @objc final public func isPhoneSupported() -> Swift.Bool
}
@objc public enum MobileFlowState : Swift.Int {
  case off
  case preparing
  case running
  case runningWithIssues
  public var value: Swift.String {
    get
  }
  public func name() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class MobileFlowTicket : ObjectiveC.NSObject {
  @objc final public let barcode: Swift.String
  @objc final public let validAreaId: Swift.String
  @objc final public let validAreaName: Swift.String
  @objc final public let validInCompanyIds: Swift.String
  @objc final public let productName: Swift.String
  @objc final public let validFrom: Foundation.Date
  @objc final public let validTo: Foundation.Date
  @objc final public let psnr: Swift.String
  @objc final public let image: UIKit.UIImage?
  final public let downloadTimestamp: Swift.UInt
  public var validAreaIdInt: Swift.UInt? {
    get
  }
  @objc public var validInCompanyIdsList: [Swift.Int] {
    @objc get
  }
  @objc public var downloadTimeStampDate: Foundation.Date {
    @objc get
  }
  @objc public init(barcode: Swift.String, validAreaId: Swift.String, validAreaName: Swift.String, validInCompanyIds: Swift.String, productName: Swift.String, validFrom: Foundation.Date = Date(), validTo: Foundation.Date = Date(), psnr: Swift.String = "", image: UIKit.UIImage?)
  @objc convenience public init(barcode: Swift.String, validAreaId: Swift.String, validAreaName: Swift.String, validInCompanyIds: Swift.String, productName: Swift.String, validFrom: Foundation.Date = Date(), validTo: Foundation.Date = Date(), psnr: Swift.String = "")
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum MobileFlowError : Swift.Int, Swift.Error {
  case BluetoothNotActive
  case BluetoothPermissionMissing
  case DeviceOffline
  case GeneralError
  case InvalidMobileFlowToken
  case InvalidTicketURL
  case LocationPermissionMissing
  case PassageTimedOut
  case PluginOutdated
  case PluginOutdatedSoon
  case TicketDownloadLimitExceeded
  case TicketInvalidError
  case TicketNotValidForCompany
  case TicketParsingError
  case TicketTransmissionError
  case UnsupportedDevice
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public enum MobileFlowEvent : Swift.Int {
  case gateAccessTriggered
  case gateInUse
  case gateAccessCompleted
  case ticketValid
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MobileFlowPlugin {
  @objc static func getInstance(token: Swift.String) throws -> mobile_flow_plugin_ios_framework.MobileFlowPlugin
  @objc func setDelegate(_ delegate: mobile_flow_plugin_ios_framework.MobileFlowPluginDelegate)
  @available(*, deprecated, renamed: "startMobileFlow")
  @objc func startSkiing(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @objc func startMobileFlow(ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @available(*, deprecated, renamed: "stopMobileFlow")
  @objc func stopSkiing()
  @objc func stopMobileFlow()
  @objc func downloadTicket(_ url: Swift.String)
  @objc func getPluginUUID() -> Swift.String
  @available(*, deprecated, renamed: "getMobileFlowState")
  @objc func getLocalizationState() -> mobile_flow_plugin_ios_framework.MobileFlowState
  @objc func getMobileFlowState() -> mobile_flow_plugin_ios_framework.MobileFlowState
  @objc func isPhoneSupported() -> Swift.Bool
}
@objc public protocol MobileFlowPluginDelegate {
  @objc func newTicket(_ ticket: mobile_flow_plugin_ios_framework.MobileFlowTicket)
  @objc func receivedError(_ error: mobile_flow_plugin_ios_framework.MobileFlowError)
  @objc func receivedEvent(_ event: mobile_flow_plugin_ios_framework.MobileFlowEvent)
  @available(*, deprecated, renamed: "mobileFlowStateChanged")
  @objc func localizationStateChanged(to state: mobile_flow_plugin_ios_framework.MobileFlowState)
  @objc func mobileFlowStateChanged(to state: mobile_flow_plugin_ios_framework.MobileFlowState)
  @available(*, deprecated, message: "Function isn't needed with MF-Plugin 3.*")
  @objc func awakeScreen()
}
extension mobile_flow_plugin_ios_framework.MobileFlowState : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.MobileFlowState : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowState : Swift.RawRepresentable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowError : Swift.RawRepresentable {}
extension mobile_flow_plugin_ios_framework.MobileFlowEvent : Swift.Equatable {}
extension mobile_flow_plugin_ios_framework.MobileFlowEvent : Swift.Hashable {}
extension mobile_flow_plugin_ios_framework.MobileFlowEvent : Swift.RawRepresentable {}
